// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce_ui_replication/test/features/product/presentation/bloc/product_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ecommerce_ui_replication/core/error/failure.dart' as _i5;
import 'package:ecommerce_ui_replication/core/usecases/usecase_params.dart'
    as _i7;
import 'package:ecommerce_ui_replication/features/product/domain/entities/product.dart'
    as _i6;
import 'package:ecommerce_ui_replication/features/product/domain/usecases/create_product_usecase.dart'
    as _i9;
import 'package:ecommerce_ui_replication/features/product/domain/usecases/delete_product.dart'
    as _i11;
import 'package:ecommerce_ui_replication/features/product/domain/usecases/update_product.dart'
    as _i10;
import 'package:ecommerce_ui_replication/features/product/domain/usecases/view_all_product.dart'
    as _i3;
import 'package:ecommerce_ui_replication/features/product/domain/usecases/view_product.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ViewAllProductsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewAllProductsUseCase extends _i1.Mock
    implements _i3.ViewAllProductsUseCase {
  MockViewAllProductsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>> call(
    _i7.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Product>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>);
}

/// A class which mocks [ViewProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewProductUseCase extends _i1.Mock
    implements _i8.ViewProductUseCase {
  MockViewProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Product>> call(_i7.IdParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>.value(
              _FakeEither_0<_i5.Failure, _i6.Product>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>);
}

/// A class which mocks [CreateProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProductUseCase extends _i1.Mock
    implements _i9.CreateProductUseCase {
  MockCreateProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> call(
    _i7.ProductParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i5.Failure, _i2.Unit>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [UpdateProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductUseCase extends _i1.Mock
    implements _i10.UpdateProductUseCase {
  MockUpdateProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> call(
    _i7.ProductParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i5.Failure, _i2.Unit>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [DeleteProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductUseCase extends _i1.Mock
    implements _i11.DeleteProductUseCase {
  MockDeleteProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> call(_i7.IdParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i5.Failure, _i2.Unit>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
